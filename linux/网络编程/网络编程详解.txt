###!!!
	涉及 进程,信号,字节顺序,内存映射,动态内存分配
	
client-server model:
	transaction(事务):
		1. client -> 发送请求 -> server
		2. server -> 解释
		3. server -> 返回请求 
		4. client -> 响应返回
		
###!!!TCP/IP 协议族
	1. IP协议 
		提供基本命名方法和递送机制
	2. UDP(Unreliable Datagram Protocol) 不可靠数据报协议  
		稍微扩展了IP协议
	3. TCP
		构建在IP之上的复杂协议
	
	注意: TCP/IP 是大端序	
		
	//IP address structure
	struct in_add {
		uint32_t s_addr;
	}	
	
###!!!网络和主机字节顺序间实现转换
	#include <arpa/inet.h>
	
	uint32_t htonl(uint32_t hostlong);
	uint16_t htons(uint16_t hostshort);
							//返回 网络字节顺序的值
	uint32_t ntohl(uint32_t netlong);
	uint16_t ntohs(uint16_t netshort);
							//返回 主机字节顺序的值

###!!!IP地址和点分十进制串间实现转换							
	#include <arpa/inet.h>
	
	int inet_pton(int af, const *src, void *dst);
							//返回1 src错误 0 ERROR: -1
		src -> dst
	const char *inet_ntop(int af,const void *src, char *dst, socklen_t size);
							//返回指向点分十进制的指针, ERROR: NULL
		src -> dst
		af: 
			AF_INET		IPV4
			AF_INET6	IPV6
			
	linux> hostname -i (linux上获取点分十进制IP信息)

###!!!	
	/etc/services  包含一张这代机器提供的知名名字和知名端口之间的映射
	
	(cliaddr:cliport,servaddr:servport)  套接字对(socketpair)
	
	struct sockaddr_in {
		uint16_t 		sin_family;		//协议族
		uint16_t		sin_port;		//端口
		struct in_addr	sin_addr;		//IP地址
		unsigned char	sin_zero[8];	//为了和下面结构体相互转换补上的字节数
	};
	
	struct sockaddr {
		uint16_t 		sa_family;
		char			sa_data[14];
	};
	
###!!! socket函数
	#include <sys/types.h>
	#include <sys/socket.h>
	//创建socket
	int socket(int domain,int type,int protocol);
									//返回非负描述符  ERROR: -1
		domaim:		//协议族
			PF_INET:	IPv4互联网协议族。		
			PF_INET6:	IPv6互联网协议族。			
			PF_LOCAL:	本地通信的UNIX协议族。			
			PF_PACKET:	底层套接字的协议族。		
			PF_IPX:		IPX Novell协议族。 
			...等
		type:		//套接字类型
			SOCK_STREAM(面向连接的套接字) :
						对于这种类型，可以看作是两端通过传送带传输数据。发送方将数据放在传送带上，通过传送带传递数据。只要传送带本身没有问题，就能保证数据不丢失。并且先放的数据先到达。

						特点就是:
							1. 传输过程中数据不会丢失。
							2. 按序传输数据。
							3. 传输的数据不存在数据边界。

						第三点的意思就是，发送方也许分5次发送数据，每次发送20字节，总共发送100字节。而接收方不一定必须进行5次接收，可以等100字节都到达时候，调用recv函数一次性接收。
						换句话说，第三点的意思就是send函数和recv函数的调用次数可以不同。

			SOCK_DGRAM(面向消息的套接字) :

						特点就是: 
							1. 强调快速传输而非传输顺序。
							2. 传输的数据可能丢失或损毁。
							3. 传输的数据有数据边界（即send含糊和recv函数的调用次数必须相同）。
							4. 限制每次传输的数据大小。

			SOCK_SEQPACKET:
						提供了一个有序的、可靠的、基于双向连接的包,固定最大值的数据报的数据传输路径长度;
						消费者需要读取整个包与每个输入系统调用。
			SOCK_RAW:
						提供原始网络协议访问。
			SOCK_RDM:
						提供了一个不保护‐的可靠数据报层三通排序。
			SOCK_PACKET:
						已过时，不应在新程序中使用;
		
		protocol:
			该参数决定最终采用的协议。第一个参数只是指定了协议族，一个协议族中存在多个协议。
			而且同一个协议族中可能存在多个数据传输方式相同的协议，
			因此即使指定了前两个参数，还要通过第三个参数最终决定使用的协议。如果满足前两个参数条件的协议只有一个，则第三个参数可以为0。
			
###!!!connect函数
	#include <sys/socket.h>
	//创建连接
	int connect(int clientfd,const struct sockaddr *addr,socklen_t addrlen);
											//返回0  ERROR: -1
											
###!!!bind函数
	#include <sys/socket.h>
	
	int bind(int sockfd,const struct sockaddr *addr,socklen_t addrlen);
											//返回0  ERROR: -1
		addrlen :		sizeof(sockaddr_in)
		
###!!!listen函数
	#include <sys/socket.h>
	
	int listen(int sockfd,int backlog);
											//返回0  ERROR: -1
		sockfd: 套接字
		backlog: 缓存队列数量限制
		
###!!!accept函数
	#include <sys/socket.h>
	
	int accept(int listenfd,struct sockaddr *addr,int *addrlen);
											//返回非负连接符 ERROR: -1
		listenfd: 	监听描述符
		addr: 		客户端套接字地址信息
		return: 	已连接描述符
		
###!!!主机和服务的装换
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netdb.h>
	//将主机名,主机地址,服务名,端口号的字符串转换成套接字地址结构
	int getaddrinfo(const char *host,const char *service,const struct addrinfo *hints,struct addrinfo **result);
											//返回0   ERROR ; 错误代码
											//host or service 可以为NULL
		host:		域名 or 点分十进制IP地址
		service:	服务名 or 十进制端口号
		hints:		提供对result的控制,只能设置以下字段
			ai_family: 		可限制返回的协议族
			ai_socktype:	连接,数据报,原始套接字
			ai_protocol:	
			ai_flags:		
					AI_ADDRCONFIG:	返回与本机相同的协议族
					AI_CANONNAME:	将列表的第一个addrinfo结构的ai_canonname字段指向host的权威名字
					AI_NUMERICSERV:	强制限制参数service为端口号
					AI_PASSIVE:		返回的套接字地址可能被服务器用作监听套接字
			其他必须为零
		result:		
	void freeaddrinfo(struct addrinfo *result);
											//释放内存
	const char *gai_strerror(int errcode);
											//返回错误信息
	
	strcut addrinfo{
		int 			ai_flags;			//hints argument flags
		int 			ai_family;			//first arg to socket function 
		int 			ai_socktype;		//second arg to socket function 
		int 			ai_protocol;		//third arg to socket function 
		char 			*ai_canonname;		//cannonical hostname
		size_t			ai_addrlen;			//sizeof ai_addr struct;
		struct sockaddr	*ai_addr;			//ptr to socket address structure
		struct addrinfo *ai_next;			//ptr to next item in linked list
		
	};
	
	#include <sys/socket.h>
	#include <netdb.h>
	
	int getnameinfo(const struct sockaddr *sa,socklen_t salen,
					char *host,size_t hostlen,
					char *service,size_t servlen,int flags);
											//返回0  ERROR: 非零错误码
		*sa:		长度为salen的套接字地址结构
		*host:		长度为hostlen的缓冲区		<---两者可为空,但必须设置一个
		*service:	长度为servlen的缓冲区    	<-----|
		flags:		
				NI_NUMERICHOST: 该函数是默认返回域名的,设置这个可以返回数字地址字符串
				NI_NUMERICSERV:	该函数是默认检查/etc/services,如果可能会返回服务名,设置这个返回端口号
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	