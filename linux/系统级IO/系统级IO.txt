###!!!较高级的IO
	1.ANSI C 标准I/O库, 栗子: printf scanf (带缓存)
	2.C++ 重载 <<(输入)  >>(输出)
	
###!!!Unix I/O

1.	fd 文件描述符
	
2.	linux shell 创建的每个进程都有的三个文件
	头文件 <unistd.h> 定义
		STDIN_FILENO	标准输入
		STDOUT_FILENO	标准输出
		STDERR_FILENO	标准错误

3. 移动文件的当前位置
	#include <sys/types.h>
	#include <unistd.h>

	off_t lseek(int fd, off_t offset, int whence);
		fd: 文件描述符
		offset: 偏移量
		whence: 
			SEEK_SET: 文件开头位置
			SEEK_CUR: 文件当前位置
			SEEK_END: 文件末尾位置
			
4. 关闭文件
	close(fd);
	
###!!!文件
	1. 普通文件(regular file):
		应用程序需要区分,对于内核而言没有区别
			1. 文本文件(text file):  只含有ASCII 或 Unicode 字符
				新行符("\n") 与 ASCII的换行符(LF)一样  值0x0a
			2. 二进制(binary file):  所有其他文件
	2. 目录(directory):
		包含一组链接(link)的文件,至少包含 .(当前目录) 和..(父目录)
		mkdir: 创建目录
		rmdir: 删除目录
	3. 套接字(socket):
		用来与另一个进程进行跨网络通信的文件。
	4. 命名管道(named pipe):
	5. 符号链接(symbolicc link):
	6. 字符和块设备(character and block decvice):
	
###!!!打开关闭文件
	#include <sys/types>
	#include <sys/stat.h>
	#include <fcntl.h>	
		
	int open(char *filename, int flags, mode_t mode); 
												//返回文件描述符。ERROR: -1
	将filename 转换成文件描述符
	flags: 访问模式
		O_RDONLY: 	只读
		O_WRONLY: 	只写
		O_RDWR: 	可读可写
		
		O_CREAT: 	文件不存在,创建截断(truncated)(空)文件
		O_TRUNC: 	文件存在,截断它
		O_APPEND: 	写操作时,设置位置到文件末尾
		
	mode: 权限设置 (嫌麻烦直接用数字代替,0777D(0 111 111 111B))
		由二进制来看每一位设置对应下面的这些,1为设置,0不设置
		S_IRUSR		拥有者可读
		S_IWUSR		拥有者可写
		S_IXUSE		拥有者可执行
		S_IRGRP		拥有者组员可读
		S_IWGRP		拥有者组员可写
		S_IXGRP  	拥有者组员可执行
		S_IROTH		任何人可读
		S_IWOTH		任何人可写
		S_IXOTH		任何人可执行
		
	#include <unistd.h>
	
	int close(int fd);	
					//返回0。 ERROR: -1
	!关闭一个已关闭的描述符会出错
	
###!!!读写文件
	#include <unistd.h>
	
	ssize_t read(int fd,void *buf, size_t n);
						//返回读取的字节数, ERROR: -1
		fd: 	文件描述符
		buf: 	读取缓存
		n: 		大小
	
	ssize_t write(int fd,const void *buf, size_t n);
						//返回写入的字节数, ERROR: -1
		fd: 	文件描述符
		buf: 	写入缓存
		n: 		大小					
	
	ssize_t 与 size_t 的区别:
		long 与 unsigned long  为了返回 -1 这个可能。
			
###!!! 健全的RIO包
	见rioapi.c rioapi.h
	
	
###!!! 读取文件元数据
	#include <unistd.h>
	#include <sys/stat.h>
	
	int stat(const char *filename, strcut stat *buf);
								//返回0, ERROR: -1
		filename: 文件名
		*buf: stat文件内容结构体
	int fstat(int fd, struct stat *buf);
								//返回0, ERROR: -1
		fd: 文件描述符
		*buf: stat文件内容结构体
	
	struct stat{
		dev_t 			st_dev;			//
		ino_t 			st_ino;			//文件位置
		mode_t 			st_mode;		//权限
		nlink_t			st_nlink;		//硬链接数
		uid_t			st_uid;			//用户ID
		gid_t			st_gid;			//用户组ID
		dev_t			st_rdev;		//
		off_t			st_size;		//文件大小字节数
		unsigned long	st_blksize;		//文件系统I/O 块大小
		unsigned long	st_blocks;		//块数
		time_t			st_atime;		//最后使用时间
		time_t			st_mtime;		//最后修改时间
		time_t 			st_ctime;		//最后改变时间
	};
	
###!!! 使用宏确定文件类型
	S_ISREG(stat.st_mode)		//判断普通文件
	S_ISDIR(stat.st_mode)		//判断目录文件
	S_ISSOCK(stat.st_mode)		//判断网络套接字
		
###!!! 打开读取关闭目录内容
	#include <sys/types.h>
	#include <dirent.h>
	
	DIR *opendir(const char *name);
							//返回 处理目录流(directory stream)指针 ERROR: NULL
							
	#include <dirent.h>
	
	struct dirent *readdir(DIR *dirp);
							//返回 指向下一个目录项的指针 ERROR: NULL
							
	struct dirent {
		ino_t d_ino;		//文件位置
		char d_name[256];	//文件名
	};
		
	#include <dirent.h>
	
	int close(DIR *drip);
							//返回0 ERROR: -1
	
###!!!chestnut
	int main(int argc,char **argv)
	{
		DIR *streamp;
		strcut dirent *dep;
		
		streamp = opendir(argv[1]);
		errno = 0;
		while((dep = readdir(streamp)) != NULL) {
			printf("Found file: %s\n",dep->d_name);
		}
		if(errno != 0)
			unix_error("readdir error");
			
		close(streamp);
		exit(0);
	}
		
###!!! 共享文件
	1. 描述符表(descriptor table)
			文件描述符(每个进程独立拥有)
	2. 文件表(file table) 					--> 所有进程共享 
			打开文件的集合   组成部分如下
				1. 文件位置
				2. 引用计数(reference count) (指向这个表项的描述符表项数)
				3. 指向v-node表中对应表项的指针
	3. v-node表(v-node table)				--> 所有进程共享 
			包含stat结构体中的大多数信息
			
###!!! I/O重定向
	#include <unistd.h>
	int dup2(int oldfd,int newfd);
							//返回非负描述符, ERROR: -1
		newfd 指向 oldfd
		
###!!!标准I/O库
	#include <stdio.h>
	extern FILE *stdin;
	extern FILE *stdout;
	extern FILE *stderr;
	
	fopen,fclose fread,fwrite fgets,fputs scanf printf
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		